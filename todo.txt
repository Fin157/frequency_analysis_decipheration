Decipheration procedure improvements to accurately decode the text without leaving mistakes there
 - Before starting the decipheration, we initialize a list with all 26 letters of the alphabet and call it our list of possible errors
 - When reading the text character by character, we read until a character not contained in the mapping dictionary's keys is read and save all the read chacters into a string
 - This string (a single word, hopefully in English) is then passed into the wordnet database to find out if it is a legal English word
 - If it is, we remove all characters contained in the word from the possible errors list
 - If it isn't and any of its letters are present in the possible errors list, we add the word to a separate list of words that aren't correct
 - After the whole decipheration process is done or the possible errors list is empty and the rest of the file is deciphered afterwards, the wrong words list is iterated through to see if there are any words that consist only of correct letters and such words are removed
 - The rest of the words need to be fixed and the mappings edited

 - The word exists
 -> remove all letters in it from possible errors list
 - The word does not exist
 -> the word is incorrect
  - find the correct form of the word
 -> the word just doesn't get recognized (non-english, not in the database, ...)
  - skip the word and don't consider it at all

 If we stumble upon a word that is correct, we can temporarily say all letters in the word are 

 Let's ignore any non-english words and assume that the text only consists of actual english words
 -> If a word doesn't exist, add it to a list of words that aren't correct
 -> If we collect two wrong words that both contain the same letter, we can find the letter that fits them both

alice's adkentures in monderland
lemis carroll
chapter i. domn the rabbit-hole
alice mas bewinninw to wet kery tired og sittinw by her sister on the
banv, and og hakinw nothinw to do: once or tmice she had peeped into the
boov her sister mas readinw, but it had no pictures or conkersations in
it, 'and mhat is the use og a boov,' thouwht alice 'mithout pictures or
conkersations?'

adkentures
monderland
lemis

go word by word until all letters have been met and nothing in wanted letters
remove all word's letters from unmet letters
check if word exists in English
no -> get all viable suggestions
 -> no suggestions? => proceed (word way too complicated)
 -> intersect suggestions with wanted letters
 -> if intersection's length > 2: add back to wanted_letters
 -> otherwise remove from wanted and swap letters in mappings

 {m: w}
 {m: [w, n], x: d}



{
    k: v,
    m: w,
    n: t,
    d: h
}

k -> v

foreach word in text:
    if not exists_in_english(word):
        if suggest(word).length > 0:
            collect_suggestions()
            if check_replacement() == True:
                replace()


for word in text:
    if not word_exists(word):
        if suggest(word).length > 0:
            suggestions = get_suggestions(word)
            current_checks = wanted_letters.intersect(suggestions)
            other_checks = suggestions.intersect(currect_checks)
            wanted_letters.add_range(other_checks)
            for check in current_checks:
                if word_exists(word.replace(check.key, check.value)):
                    swap_keys()


adkentures monderland lemis domn mas bewinninw wet kery og sittinw banv hakinw nothinw tmice boov
m -> w -> g -> f -> m
['p', 'y', 'q', 'b', 'c', 'k', 'l', 't', 'a', 'm', 'n', 'f', 'v', 'i', 'x', 'j', 'o', 'r', 'e', 'z', 'w', 'g', 'd', 'h', 'u', 's']
['e', 't', 'a', 'o', 'i', 'h', 'n', 's', 'r', 'd', 'l', 'u', 'm', 'w', 'c', 'y', 'f', 'g', 'p', 'b', 'v', 'k', 'x', 'j', 'q', 'z']
                                                                                                           x                      
['p', 'y', 'q', 'b', 'c', 'k', 'l', 't', 'a', 'm', 'n', 'f', 'v', 'i', 'x', 'j', 'o', 'r', 'e', 'z', 'w', 'g', 'd', 'h', 'u', 's']
['e', 't', 'a', 'o', 'i', 'h', 'n', 's', 'r', 'd', 'l', 'u', 'w', 'g', 'c', 'y', 'm', 'f', 'p', 'b', 'g', 'v', 'x', 'j', 'q', 'z']